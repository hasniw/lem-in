#include "../include/lem_in.h"

// void			ft_print_name_matrix(t_var *var)
// {
// 	int i = -1;

// 	while (i < var->nbr_vertex)
// 	{
// 		if 
// 	}
// }

// static void		assign_matrix(t_vertex *vertex, char **name, t_var *var, int x)
// {
// 	int			i;
// 	t_vertex	*room;

// 	i = 0;
// 	room = (t_vertex *)vertex;
// 	while (vertex->links)
// 	{
// 		while (!ft_strequ(vertex->links->vertex->name, name[i]))
// 			i++;
// 		if (ft_strequ(vertex->links->vertex->name, name[i]))
// 		{
// 			var->matrix[x + i * var->nbr_vertex] = 1;
// 			var->matrix[i + x * var->nbr_vertex] = 1;
// 			i = 0;
// 			vertex->links = vertex->links->next;
// 		}
// 	}
// }

// static void		ft_set_matrix(t_var *var)
// {
// 	size_t		y;
// 	size_t		x;
// 	t_vertex	*room;

// 	room = (t_vertex *)var->vertex;
// 	y = 0;
// 	while (y < var->nbr_vertex)
// 	{
// 		x = 0;
// 		while (x < var->nbr_vertex)
// 		{
// 			assign_matrix(room, var->matrix_name, var, x);
// 			room = room->next;
// 			x++;
// 		}
// 		y++;
// 	}
// }

static void		ft_create_matrix(t_var *var)
{
	size_t		i;
	t_vertex	*vertex;

	vertex = (t_vertex *)var->vertex;
	i = -1;
	var->matrix_name = (char **)malloc(sizeof(char *) * var->nbr_vertex);
	while (++i < var->nbr_vertex)
	{
		var->matrix_name[i] = ft_strdup(vertex->name);
		vertex = vertex->next;
	}
	var->matrix = (int *)malloc(sizeof(int) * var->nbr_vertex * var->nbr_vertex);
	ft_memset(var->matrix, 0, var->nbr_vertex * var->nbr_vertex);
}

void		ft_matrix(t_var *var)
{
	// int i = -1;

	ft_create_matrix(var);
	// ft_set_matrix(var);
	// while (var->matrix_name[++i])
	// 	printf("matrix_name[%d] : %s\n", i, var->matrix_name[i]);
}